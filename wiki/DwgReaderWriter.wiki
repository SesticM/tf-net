#summary TF.NET Reader/Writer for ObjectARX

== Introduction ==

A reader/writer for geometric entities exposed by Autodesk AutoCAD and it's verticals. Curve-based entities and sub-entities are tesselated during the process. Processed AutoCAD entities are supposed to be database resident objects (DBRO).


== Components ==

A `Topology.IO.Dwg.dll` library file available for download [http://tf-net.googlecode.com/files/Topology.IO.Dwg.dll here]. Library exposes `DwgReader` and `DwgWriter` classes residing within `Topology.IO.Dwg` namespace.


== Prerequisites ==

References two Autodesk libraries being part of managed ObjectARX. Referenced libraries are `acdbmgd.dll` and `acmgd.dll` which may be found in the root installation folder of the targeted Autodesk platform/vertical. This reader/writer is supposed to work on following versions of basic Autodesk platform/verticals: AutoCAD 2005, AutoCAD 2006, AutoCAD 2007 and AutoCAD 2008.

Also references TF.NET core library available for download [http://tf-net.googlecode.com/files/Topology.dll here].


== Limitations ==

Currently can read/write only few ObjectARX types.


== Examples ==

Example of simple conversion between JTS and AutoCAD geometries:
  # Build this example into DLL
  # Load created DLL into AutoCAD using `NETLOAD` command
  # Draw either lightweigh or 3D polyline (with or without arc segments)
  # Run the example using `DWGWRITE` command and select a polyline
  # Resulting polyline of chosen type is drawn in red, having it's arc segments tesselated

Source code:

{{{
Imports Topology.Geometries
Imports Topology.IO.Dwg

Imports Autodesk.AutoCAD.ApplicationServices
Imports Autodesk.AutoCAD.DatabaseServices
Imports Autodesk.AutoCAD.Geometry
Imports Autodesk.AutoCAD.Runtime
Imports Autodesk.AutoCAD.EditorInput

Public Class Test

    <CommandMethod("DWGWRITE")> _
    Public Shared Sub DwgWrite()
        Dim AcEd As Editor = Application.DocumentManager.MdiActiveDocument.Editor
        Dim m_Option As PromptSelectionOptions = New PromptSelectionOptions
        m_Option.MessageForAdding = "Select object:"
        m_Option.AllowDuplicates = False
        m_Option.SingleOnly = True

        Dim m_Result As PromptSelectionResult = AcEd.GetSelection(m_Option)
        If m_Result.Status = PromptStatus.OK Then
            Dim m_SelectionSet As SelectionSet = m_Result.Value
            Dim m_ObjectId As ObjectId = m_SelectionSet.GetObjectIds(0)
            Dim DB As Database = HostApplicationServices.WorkingDatabase
            Dim TR As Transaction = DB.TransactionManager.StartTransaction()
            Dim m_Entity As Entity = TR.GetObject(m_ObjectId, OpenMode.ForRead)

            Dim m_Reader As New DwgReader
            Dim m_Writer As New DwgWriter
            Dim m_LineString As LineString = LineString.Empty
            Dim m_Geometry As Entity = Nothing
            Try
                Select Case m_Entity.GetRXClass.Name
                    Case "AcDbPolyline", "AcDb3dPolyline"
                        Dim m_KeywordOptions As New PromptKeywordOptions(vbLf + "Write object as: ")
                        m_KeywordOptions.AllowNone = True
                        m_KeywordOptions.Keywords.Add("AcDbPolyline")
                        m_KeywordOptions.Keywords.Add("AcDb2dPolyline")
                        m_KeywordOptions.Keywords.Add("AcDb3dPolyline")
                        Dim m_KeywordOptionsResult As PromptResult = AcEd.GetKeywords(m_KeywordOptions)

                        If m_KeywordOptionsResult.Status = PromptStatus.OK Then

                            Select Case m_Entity.GetRXClass.Name
                                Case "AcDbPolyline"
                                    m_LineString = m_Reader.ReadLineString(CType(m_Entity, Polyline))
                                Case "AcDb3dPolyline"
                                    m_LineString = m_Reader.ReadLineString(CType(m_Entity, Polyline3d))
                            End Select

                            Select Case m_KeywordOptionsResult.StringResult
                                Case "AcDbPolyline"
                                    m_Geometry = m_Writer.WritePolyline(m_LineString)
                                Case "AcDb2dPolyline"
                                    m_Geometry = m_Writer.WritePolyline2d(m_LineString)
                                Case "AcDb3dPolyline"
                                    m_Geometry = m_Writer.WritePolyline3d(m_LineString)
                            End Select
                        End If
                        m_Geometry.ColorIndex = 1
                End Select

                Dim BT As BlockTable = TR.GetObject(DB.BlockTableId, OpenMode.ForRead)
                Dim BTR As BlockTableRecord = TR.GetObject(DB.CurrentSpaceId, OpenMode.ForWrite)
                BTR.AppendEntity(m_Geometry)
                TR.AddNewlyCreatedDBObject(m_Geometry, True)
                TR.Commit()
            Finally
                TR.Dispose()
            End Try
        End If
    End Sub

End Class
}}} 