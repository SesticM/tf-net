#summary TF.NET Reader/Writer for ObjectARX

== Introduction ==

A reader/writer for geometric entities exposed by Autodesk AutoCAD and it's verticals. Curve-based entities and sub-entities are tesselated during the process. Processed AutoCAD entities are supposed to be database resident objects (DBRO).


== Components ==

A `Topology.IO.Dwg.dll` library file available for download [http://tf-net.googlecode.com/files/Topology.IO.Dwg.dll here]. Library exposes `DwgReader` and `DwgWriter` classes residing within `Topology.IO.Dwg` namespace.


== Prerequisites ==

References two Autodesk libraries being part of managed ObjectARX. Referenced libraries are `acdbmgd.dll` and `acmgd.dll` which may be found in the root installation folder of the targeted Autodesk platform/vertical. This reader/writer is supposed to work on following versions of basic Autodesk platform: AutoCAD 2005, AutoCAD 2006, AutoCAD 2007 and AutoCAD 2008, including vertical products in the same versions.

Also references TF.NET core library available for download [http://tf-net.googlecode.com/files/Topology.dll here].


== Limitations ==

Currently can read/write only few ObjectARX types.


== Examples ==

Example of simple conversion between JTS and AutoCAD geometries:
  # Build this example into DLL
  # Load created DLL into AutoCAD using `NETLOAD` command
  # Draw either lightweigh or 3D polyline (with or without arc segments)
  # Run the example using `WRITEPOLYLINE` command and select a polyline
  # Resulting polyline of chosen type is drawn in red, having it's arc segments tesselated

Source code:

{{{
Imports Topology.Geometries
Imports Topology.IO.Dwg

Imports Autodesk.AutoCAD.ApplicationServices
Imports Autodesk.AutoCAD.DatabaseServices
Imports Autodesk.AutoCAD.Geometry
Imports Autodesk.AutoCAD.Runtime
Imports Autodesk.AutoCAD.EditorInput

Public Class Test

    <CommandMethod("WRITEPOLYLINE")> _
    Public Shared Sub WritePolyline()
        Dim ed As Editor = Application.DocumentManager.MdiActiveDocument.Editor
        Dim selOptions As PromptSelectionOptions = New PromptSelectionOptions
        selOptions.MessageForAdding = "Select object:"
        selOptions.AllowDuplicates = False
        selOptions.SingleOnly = True

        Dim result As PromptSelectionResult = ed.GetSelection(selOptions)
        If result.Status = PromptStatus.OK Then
            Dim selSet As SelectionSet = result.Value
            Dim objId As ObjectId = selSet.GetObjectIds(0)
            Dim db As Database = HostApplicationServices.WorkingDatabase
            Dim tr As Transaction = db.TransactionManager.StartTransaction()
            Dim inEnt As Entity = tr.GetObject(objId, OpenMode.ForRead)

            Dim reader As New DwgReader
            Dim writer As New DwgWriter
            Dim lineString As LineString = lineString.Empty
            Dim outEnt As Entity = Nothing
            Try
                Select Case inEnt.GetRXClass.Name
                    Case "AcDbPolyline", "AcDb3dPolyline", "AcDb2dPolyline"
                        Dim kwdOptions As New PromptKeywordOptions(vbLf + "Write object as: ")
                        kwdOptions.AllowNone = True
                        kwdOptions.Keywords.Add("AcDbPolyline")
                        kwdOptions.Keywords.Add("AcDb2dPolyline")
                        kwdOptions.Keywords.Add("AcDb3dPolyline")
                        Dim kwdResult As PromptResult = ed.GetKeywords(kwdOptions)

                        If kwdResult.Status = PromptStatus.OK Then
                            Select Case inEnt.GetRXClass.Name
                                Case "AcDbPolyline"
                                    lineString = reader.ReadLineString(CType(inEnt, Polyline))
                                Case "AcDb3dPolyline"
                                    lineString = reader.ReadLineString(CType(inEnt, Polyline3d))
                                Case "AcDb2dPolyline"
                                    lineString = reader.ReadLineString(CType(inEnt, Polyline2d))
                            End Select

                            Select Case kwdResult.StringResult
                                Case "AcDbPolyline"
                                    outEnt = writer.WritePolyline(lineString)
                                Case "AcDb2dPolyline"
                                    outEnt = writer.WritePolyline2d(lineString)
                                Case "AcDb3dPolyline"
                                    outEnt = writer.WritePolyline3d(lineString)
                            End Select
                        End If
                        outEnt.ColorIndex = 1
                End Select

                Dim bt As BlockTable = tr.GetObject(db.BlockTableId, OpenMode.ForRead)
                Dim btr As BlockTableRecord = tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite)
                btr.AppendEntity(outEnt)
                tr.AddNewlyCreatedDBObject(outEnt, True)
                tr.Commit()
            Finally
                tr.Dispose()
            End Try
        End If
    End Sub

End Class
}}}

Example of creating a buffer around AutoCAD polyline:
  # Build this example into DLL
  # Load created DLL into AutoCAD using `NETLOAD` command
  # Draw any type of polyline
  # Run the example using `CREATEBUFFER` command
  # Select a polyline (open or closed one)
  # Enter buffer offset (double value)
  # Resulting buffer representation is drawn in red, using polyline entities

Buffer around polyline:
http://www.theswamp.org/index.php?action=dlattach;topic=20176.0;attach=6353;image

Buffer around closed polyline:
http://www.theswamp.org/index.php?action=dlattach;topic=20176.0;attach=6354;image

Source code:

{{{
    <CommandMethod("CREATEBUFFER")> _
    Public Shared Sub CreateBuffer()
        Dim ed As Editor = Application.DocumentManager.MdiActiveDocument.Editor
        Dim selOptions As PromptSelectionOptions = New PromptSelectionOptions
        selOptions.MessageForAdding = "Select object:"
        selOptions.AllowDuplicates = False
        selOptions.SingleOnly = True

        Dim result As PromptSelectionResult = ed.GetSelection(selOptions)
        If result.Status = PromptStatus.OK Then
            Dim selSet As SelectionSet = result.Value
            Dim objId As ObjectId = selSet.GetObjectIds(0)
            Dim db As Database = HostApplicationServices.WorkingDatabase
            Dim tr As Transaction = db.TransactionManager.StartTransaction()
            Dim inEnt As Entity = tr.GetObject(objId, OpenMode.ForRead)

            Dim reader As New DwgReader
            Dim writer As New DwgWriter
            Dim lineString As LineString = lineString.Empty
            Dim outEnts() As Polyline = Nothing
            Try
                Select Case inEnt.GetRXClass.Name
                    Case "AcDbPolyline"
                        lineString = reader.ReadLineString(CType(inEnt, Polyline))
                    Case "AcDb3dPolyline"
                        lineString = reader.ReadLineString(CType(inEnt, Polyline3d))
                    Case "AcDb2dPolyline"
                        lineString = reader.ReadLineString(CType(inEnt, Polyline2d))
                End Select

                Dim dblOptions As New PromptDoubleOptions("Enter buffer offset: ")
                dblOptions.AllowNegative = False
                dblOptions.AllowNone = False
                dblOptions.AllowZero = False
                Dim dblOptionsResult As PromptDoubleResult = ed.GetDouble(dblOptions)

                If dblOptionsResult.Status = PromptStatus.OK Then
                    Dim offset As Double = dblOptionsResult.Value

                    Dim buffer As Geometry = lineString.Buffer(offset)
                    If buffer.GeometryType = "Polygon" Then
                        outEnts = writer.WritePolyline(CType(buffer, Polygon))

                    End If
                End If

                Dim bt As BlockTable = tr.GetObject(db.BlockTableId, OpenMode.ForRead)
                Dim btr As BlockTableRecord = tr.GetObject(db.CurrentSpaceId, OpenMode.ForWrite)

                If outEnts IsNot Nothing Then
                    For Each outEnt As Entity In outEnts
                        outEnt.ColorIndex = 1
                        btr.AppendEntity(outEnt)
                        tr.AddNewlyCreatedDBObject(outEnt, True)
                    Next
                End If

                tr.Commit()
            Finally
                tr.Dispose()
            End Try
        End If
    End Sub
}}}